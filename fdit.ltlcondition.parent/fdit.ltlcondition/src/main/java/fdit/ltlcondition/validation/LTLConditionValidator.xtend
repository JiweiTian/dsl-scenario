/*
 * generated by Xtext 2.12.0
 */
package fdit.ltlcondition.validation

import fdit.ltlcondition.lTLCondition.Prism
import fdit.ltlcondition.lTLCondition.AircraftDynamicProperty
import fdit.ltlcondition.lTLCondition.AircraftStaticProperty
import fdit.ltlcondition.lTLCondition.Area
import fdit.ltlcondition.lTLCondition.BooleanAlways
import fdit.ltlcondition.lTLCondition.BooleanEventually
import fdit.ltlcondition.lTLCondition.BooleanLiteral
import fdit.ltlcondition.lTLCondition.Different
import fdit.ltlcondition.lTLCondition.Equals
import fdit.ltlcondition.lTLCondition.DoubleLiteral
import fdit.ltlcondition.lTLCondition.GreaterThan
import fdit.ltlcondition.lTLCondition.GreaterThanOrEq
import fdit.ltlcondition.lTLCondition.IntLiteral
import fdit.ltlcondition.lTLCondition.LowerThan
import fdit.ltlcondition.lTLCondition.LowerThanOrEq
import fdit.ltlcondition.lTLCondition.StringLiteral
import org.eclipse.xtext.validation.Check
import fdit.ltlcondition.lTLCondition.LTLConditionPackage
import fdit.ltlcondition.lTLCondition.Model
import static fdit.tools.i18n.MessageTranslator.createMessageTranslator
import fdit.tools.i18n.MessageTranslator
import fdit.ltlcondition.lTLCondition.ArithmExpr
import fdit.ltlcondition.typing.ExpressionsTypeComputer
import com.google.inject.Inject
import fdit.ltlcondition.lTLCondition.CommonStaticProperty

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class LTLConditionValidator extends AbstractLTLConditionValidator {

    @Inject extension ExpressionsTypeComputer

    static val MessageTranslator TRANSLATOR = createMessageTranslator(LTLConditionValidator)

    public static val INVALID_COMPARISON = 'invalidComparison'
    public static val INVALID_COMPARISON_STRING = INVALID_COMPARISON + ".string"
    public static val INVALID_COMPARISON_BOOLEAN = INVALID_COMPARISON + ".boolean"
    public static val INVALID_ALTITUDE_RANGE = 'invalidAltitudeRange'
    public static val MISSING_TEMPORAL_OP = 'missingTemporalOp'
    public static val MISSING_TEMPORAL_OP_DYNAMICS = MISSING_TEMPORAL_OP + '.dynamics'
    public static val MISSING_TEMPORAL_3D_AREA = MISSING_TEMPORAL_OP + '.3Darea'
    public static val EXTRA_TEMPORAL_OP = 'extraTemporalOp'
    public static val CASCADE_TEMPORAL_OP = 'cascadeTemporalOp'
    public static val TYPE_CHECK_FAILS = 'typeCheckFails'
    public static val TYPE_CHECK_FAILS_NUMBER = TYPE_CHECK_FAILS + '.number'
    public static val TYPE_CHECK_FAILS_STRING = TYPE_CHECK_FAILS + '.string'
    public static val TYPE_CHECK_FAILS_BOOL = TYPE_CHECK_FAILS + '.boolean'

    @Check
    def checkParameterFromAtLeastOneSideOfExprsLowerThan(LowerThan lowerThan) {
        if(!(lowerThan.prop instanceof AircraftStaticProperty || lowerThan.prop instanceof AircraftDynamicProperty)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON),
            LTLConditionPackage.Literals::LOWER_THAN__PROP,
            INVALID_COMPARISON)
        }
    }

    @Check
    def checkParameterFromAtLeastOneSideOfExprsGreaterThan(GreaterThan greater_than) {
        if(!(greater_than.prop instanceof AircraftStaticProperty || greater_than.prop instanceof AircraftDynamicProperty)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON),
            LTLConditionPackage.Literals::GREATER_THAN__PROP,
            INVALID_COMPARISON)
        }
    }

    @Check
    def checkParameterFromAtLeastOneSideOfExprsGreaterThanOrEq(GreaterThanOrEq greater_than_or_eq) {
        if(!(greater_than_or_eq.prop instanceof AircraftStaticProperty || greater_than_or_eq.prop instanceof AircraftDynamicProperty)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON),
            LTLConditionPackage.Literals::GREATER_THAN_OR_EQ__PROP,
            INVALID_COMPARISON)
        }
    }

    @Check
    def checkParameterFromAtLeastOneSideOfExprsLowerThanOrEq(LowerThanOrEq lower_than_or_eq) {
        if(!(lower_than_or_eq.prop instanceof AircraftStaticProperty || lower_than_or_eq.prop instanceof AircraftDynamicProperty)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON),
            LTLConditionPackage.Literals::LOWER_THAN_OR_EQ__PROP,
            INVALID_COMPARISON)
        }
    }

    @Check
    def checkParameterFromAtLeastOneSideOfExprsEquals(Equals equals) {
        if(!(equals.prop instanceof AircraftStaticProperty || equals.prop instanceof AircraftDynamicProperty)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON),
            LTLConditionPackage.Literals::EQUALS__PROP,
            INVALID_COMPARISON)
        }
    }

    @Check
    def checkParameterFromAtLeastOneSideOfExprsDiffs(Different diffs) {
        if(!(diffs.prop instanceof AircraftStaticProperty || diffs.prop instanceof AircraftDynamicProperty)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON),
            LTLConditionPackage.Literals::DIFFERENT__PROP,
            INVALID_COMPARISON)
        }
    }

    // ----------- Making sure that altitude range are well formed ------------ //


    @Check
    def checkAltitudeRangePrism(Prism prism) {
        if(!(prism.lowerAltitude.numberValue < prism.upperAltitude.numberValue)) {
            error(TRANSLATOR.getMessage(INVALID_ALTITUDE_RANGE),
            LTLConditionPackage.Literals::PRISM__LOWER_ALTITUDE,
            INVALID_ALTITUDE_RANGE)
        }
    }

    def private dispatch getNumberValue(IntLiteral il) {
        return il.value
    }

    def private dispatch getNumberValue(DoubleLiteral fl) {
        return fl.value
    }

    // ----------- Making sure that comparisons involving dynamic properties are enclosed in a temporal operator ------------ //


    @Check
    def checkTemporalOperatorForDynamicProps(AircraftDynamicProperty dynamic_prop) {

        var parent = dynamic_prop.eContainer
        val visited = newHashSet()
        var found = false

        while(!found && parent !== null && !visited.contains(parent)) {
            if(parent instanceof BooleanAlways || parent instanceof BooleanEventually) {
                found = true
            } else if(parent instanceof Model ) {
                parent = null
            } else {
                visited.add(parent)
                parent = parent.eContainer
            }
        }
        if(!found) error(TRANSLATOR.getMessage(MISSING_TEMPORAL_OP_DYNAMICS),
        LTLConditionPackage.Literals::AIRCRAFT_DYNAMIC_PROPERTY__VALUE,
        MISSING_TEMPORAL_OP_DYNAMICS
        )
    }

    @Check
    def checkTemporalOperatorForArea(Area area) {

        var parent = area.eContainer
        val visited = newHashSet()
        var found = false

        while(!found && parent !== null && !visited.contains(parent)) {
            if(parent instanceof BooleanAlways || parent instanceof BooleanEventually) {
                found = true
            } else if(parent instanceof Model ) {
                parent = null
            } else {
                visited.add(parent)
                parent = parent.eContainer
            }
        }
        if(!found) error(TRANSLATOR.getMessage(MISSING_TEMPORAL_3D_AREA),
        LTLConditionPackage.Literals::AREA__AREA,
        MISSING_TEMPORAL_3D_AREA
        )
    }

    @Check
    def checkTemporalOperatorForStaticProps(AircraftStaticProperty static_prop) {

        var parent = static_prop.eContainer
        val visited = newHashSet()

        while(parent !== null && !visited.contains(parent)) {
            if(parent instanceof Model) { return }
            else if(parent instanceof BooleanAlways || parent instanceof BooleanEventually) {
                warning(TRANSLATOR.getMessage(EXTRA_TEMPORAL_OP),
                LTLConditionPackage.Literals::AIRCRAFT_STATIC_PROPERTY__VALUE,
                EXTRA_TEMPORAL_OP
                )
                return
            } else {
                visited.add(parent)
                parent = parent.eContainer
            }
        }
    }

    // ----------- Making sure that temporal operators are not enclosed in one another ------------ //


    @Check
    def checkForTemporalOverloadAlways(BooleanAlways bool_al) {

        var parent = bool_al.eContainer
        val visited = newHashSet()

        while(parent !== null && !visited.contains(parent)) {
            if(parent instanceof Model) { return }
            else if(parent instanceof BooleanAlways || parent instanceof BooleanEventually) {
                error(TRANSLATOR.getMessage(CASCADE_TEMPORAL_OP),
                LTLConditionPackage.Literals::BOOLEAN_ALWAYS__EXPRESSION,
                CASCADE_TEMPORAL_OP
                )
                return
            } else {
                visited.add(parent)
                parent = parent.eContainer
            }
        }
    }

    @Check
    def checkForTemporalOverloadEven(BooleanEventually bool_event) {

        var parent = bool_event.eContainer
        val visited = newHashSet()

        while(parent !== null && !visited.contains(parent)) {
            if(parent instanceof Model) { return }
            else if(parent instanceof BooleanAlways || parent instanceof BooleanEventually) {
                error(TRANSLATOR.getMessage(CASCADE_TEMPORAL_OP),
                LTLConditionPackage.Literals::BOOLEAN_EVENTUALLY__EXPRESSION,
                CASCADE_TEMPORAL_OP
                )
                return
            } else {
                visited.add(parent)
                parent = parent.eContainer
            }
        }
    }

    // ----------- TypeChecking ------------ //


    @Check
    def checkTypeOfDynamicProp(AircraftDynamicProperty dynamic_prop) {

        val parent_op = dynamic_prop.eContainer
        var compare_value = parent_op.eContents.get(1) as ArithmExpr
        switch (dynamic_prop.value) {
            case EMERGENCY: {
            }
            case ALTITUDE,
            case GROUND_SPEED,
            case LATITUDE,
            case VERTICAL_RATE,
            case LONGITUDE: {
                if(!(compare_value.typeFor.isDoubleType  || compare_value.typeFor.isIntType)) {
                    error(TRANSLATOR.getMessage(TYPE_CHECK_FAILS_NUMBER, dynamic_prop.value),
                    LTLConditionPackage.Literals::AIRCRAFT_DYNAMIC_PROPERTY__VALUE,
                    TYPE_CHECK_FAILS_NUMBER)
                }
            }
            case SQUAWK:  {
                if(!(compare_value.typeFor.isIntType)) {
                    error(TRANSLATOR.getMessage(TYPE_CHECK_FAILS_NUMBER, dynamic_prop.value),
                    LTLConditionPackage.Literals::AIRCRAFT_DYNAMIC_PROPERTY__VALUE,
                    TYPE_CHECK_FAILS_NUMBER)
                }
            }
            case SPI,
            case IS_ON_GROUND,
            case ALERT: {
                if(!(compare_value.typeFor.isBoolType)) {
                    error(TRANSLATOR.getMessage(TYPE_CHECK_FAILS_NUMBER, dynamic_prop.value),
                    LTLConditionPackage.Literals::AIRCRAFT_DYNAMIC_PROPERTY__VALUE,
                    TYPE_CHECK_FAILS_BOOL)
                }
            }
        }
    }

    @Check
    def checkTypeOfStaticProp(AircraftStaticProperty static_prop) {

        val parent_op = static_prop.eContainer
        var compare_value = parent_op.eContents.get(1) as ArithmExpr
        switch (static_prop.value) {
            case CALLSIGN,
            case ICAO: {
                if(!(compare_value.typeFor.isStringType)) {
                    error(TRANSLATOR.getMessage(TYPE_CHECK_FAILS_STRING, static_prop.value),
                    LTLConditionPackage.Literals::AIRCRAFT_STATIC_PROPERTY__VALUE,
                    TYPE_CHECK_FAILS_STRING)
                }
            }
            case KNOWN_POSITIONS: {
                if(!(compare_value.typeFor.isIntType)) {
                    error(TRANSLATOR.getMessage(TYPE_CHECK_FAILS_NUMBER, static_prop.value),
                    LTLConditionPackage.Literals::AIRCRAFT_STATIC_PROPERTY__VALUE,
                    TYPE_CHECK_FAILS_NUMBER)
                }
            }
            case MIN_ALTITUDE, case MAX_ALTITUDE:
                if(!(compare_value.typeFor.isDoubleType  || compare_value.typeFor.isIntType)) {
                    error(TRANSLATOR.getMessage(TYPE_CHECK_FAILS_NUMBER, static_prop.value),
                    LTLConditionPackage$Literals::AIRCRAFT_STATIC_PROPERTY__VALUE,
                    TYPE_CHECK_FAILS_NUMBER)
                }
            case TRACK: {
            }

        }
    }

    // StringLiteral only accepts == and <>

    @Check
    def checkStringLiteralIsCorrectlyCompared(StringLiteral str) {
        val parent_op = str.eContainer
        if(!(parent_op instanceof Equals || parent_op instanceof Different)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON_STRING),
            LTLConditionPackage.Literals::STRING_LITERAL__VALUE,
            INVALID_COMPARISON_STRING)
        }
    }

    // BooleanLiteral only accepts == and <>
    @Check
    def checkBooleanLiteralIsCorrectlyCompared(BooleanLiteral bool) {
        val parent_op = bool.eContainer
        if(!(parent_op instanceof Equals || parent_op instanceof Different)) {
            error(TRANSLATOR.getMessage(INVALID_COMPARISON_BOOLEAN),
            LTLConditionPackage.Literals::BOOLEAN_LITERAL__VALUE,
            INVALID_COMPARISON_BOOLEAN)
        }

    }
    //def private assertType(AircraftDynamicProperty adp, ) {
}