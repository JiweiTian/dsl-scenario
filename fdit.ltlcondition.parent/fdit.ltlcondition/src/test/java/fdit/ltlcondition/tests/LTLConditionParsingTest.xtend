/*
 * generated by Xtext 2.12.0
 */
package fdit.ltlcondition.tests

import com.google.inject.Inject
import fdit.ltlcondition.lTLCondition.Model
import fdit.ltlcondition.tests.LTLConditionInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(LTLConditionInjectorProvider)
class LTLConditionParsingTest {
    @Inject extension ParseHelper<Model>

    @Test
    def void testGreaterThan() {
        val model = '''
			eval ICAO > 2
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testEquals() {
        val model = '''
			eval CALLSIGN == "AC47ER"
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testLowerThan() {
        val model = '''
			eval ALTITUDE < 2000
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testLowerThanOrEqual() {
        val model = '''
			eval LONGITUDE <= 51
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testGreaterThanOrEqual() {
        val model = '''
			eval KNOWN_POSITIONS >= 4
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }


    @Test
    def void testGreaterThanOrEqual2() {
        val model = '''
			eval MIN_ALTITUDE >= 14000
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testDifferent() {
        val model = '''
			eval GROUNDSPEED <> 1400
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testDifferentArithm() {
        val model = '''
			eval GROUNDSPEED <> (1400 - 2) * RAP.MEAN_GROUNDSPEED
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }


    @Test
    def void testGreaterThanReverse() {
        val model = '''
			eval 2 > ICAO
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testEqualsReverse() {
        val model = '''
			eval "AC47ER" == CALLSIGN
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testLowerThanReverse() {
        val model = '''
			eval 2000 < ALTITUDE
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testLowerThanOrEqualReverse() {
        val model = '''
			eval 51 <= MAX_ALTITUDE
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testGreaterThanOrEqualReverse() {
        val model = '''
			eval 4 >= KNOWN_POSITIONS
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testDifferentReverse() {
        val model = '''
			eval 1400 <> GROUNDSPEED
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testFailTwoOperators() {
        val model = '''
			eval 1400 <> GROUNDSPEED == 2 
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testNegationSimple() {
        val model = '''
			eval not (GROUNDSPEED <> 1400)
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testNegationSimpleFail() {
        val model = '''
			eval not KNOWN_POSITIONS >= 4
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAlwaysSimple() {
        val model = '''
			eval G (KNOWN_POSITIONS >= 4)
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAlwaysSimpleArithm() {
        val model = '''
			eval G (KNOWN_POSITIONS >= 4 - RAP.MIN_LATITUDE)
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testStaticSimpleArithm() {
        val model = '''
			eval MIN_ALTITUDE >= 4 - RAP.MIN_ALTITUDE
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAlwaysSimpleFail() {
        val model = '''
			eval G KNOWN_POSITIONS >= 4
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }


    @Test
    def void testEventuallySimple() {
        val model = '''
			eval F (LONGITUDE <= 51)
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testEventuallySimpleFail() {
        val model = '''
			eval F LONGITUDE <= 51
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOutsidePrismSimple3Points() {
        val model = '''
			eval OUTSIDE prism with vertices (12,45),(1,1),(25,57) and altitude from 2 to 8999
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOutsidePrismSimple5Points() {
        val model = '''
			eval OUTSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOutsidePrismSimple2PointsFail() {
        val model = '''
			eval OUTSIDE prism with vertices (12,45),(1,2) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOutsidePrismSimple1PointFail() {
        val model = '''
			eval OUTSIDE prism with vertices (1,2) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testInsidePrismSimple3Points() {
        val model = '''
			eval INSIDE prism with vertices (12,45),(1,1),(25,57) and altitude from 2 to 8999
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testInsidePrismSimple5Points() {
        val model = '''
			eval INSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testInsidePrismSimple2PointsFail() {
        val model = '''
			eval INSIDE prism with vertices (12,45),(1,2) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testInsidePrismSimple1PointFail() {
        val model = '''
			eval INSIDE prism with vertices (1,2) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertFalse(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndSimple() {
        val model = '''
			eval GROUNDSPEED > 200 and ICAO == "TRUC"
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndSimplePar() {
        val model = '''
			eval (GROUNDSPEED > 200) and KNOWN_POSITIONS >= 4
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndSimple2Par() {
        val model = '''
			eval (GROUNDSPEED > 200) and (KNOWN_POSITIONS >= 4)
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndSimple3Par() {
        val model = '''
			eval ((GROUNDSPEED > 200) and (KNOWN_POSITIONS >= 4))
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrSimple() {
        val model = '''
			eval GROUNDSPEED > 200 and LONGITUDE <= 51
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrSimplePar() {
        val model = '''
			eval LONGITUDE <= 51 and (ICAO == "TRUC")
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrSimple2Par() {
        val model = '''
			eval (LONGITUDE <= 51) and (ICAO == "TRUC")
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrSimple3Par() {
        val model = '''
			eval ((LONGITUDE <= 51) and (ICAO == "TRUC"))
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndOrSimple() {
        val model = '''
			eval (GROUNDSPEED <> 1400 and KNOWN_POSITIONS >= 4) or CALLSIGN == "AC47ER"
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrAndSimple() {
        val model = '''
			eval (GROUNDSPEED <> 1400 or KNOWN_POSITIONS >= 4) and CALLSIGN == "AC47ER"
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrAndDouble() {
        val model = '''
			eval (GROUNDSPEED <> 1400 or KNOWN_POSITIONS >= 4) and (CALLSIGN == "AC47ER" or GROUNDSPEED > 1000)
		'''.parse
        Assert.assertNotNull(model)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrPrism() {
        val model = '''
			eval (LONGITUDE <= 51) or INSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        print(model.eResource.errors)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testOrPrismPar() {
        val model = '''
			eval (LONGITUDE <= 51) or (INSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001)
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }


    @Test
    def void testOrPrismReverse() {
        val model = '''
			eval (INSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001) or LONGITUDE <= 51
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }



    @Test
    def void testorCylinder2() {
        val model = '''
			eval (OUTSIDE prism with vertices (84,12),(34,2),(47,234) and altitude from 12000 to 4500) or INSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndCylinder3() {
        val model = '''
			eval OUTSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001 and (OUTSIDE prism with vertices (84,12),(34,2),(47,234) and altitude from 12000 to 4500)
		'''.parse
        Assert.assertNotNull(model)
        print(model.eResource.errors)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndORCascade() {
        val model = '''
			eval ((GROUNDSPEED <> 1400  and KNOWN_POSITIONS >= 4) or
			(CALLSIGN == "AC47ER" and OUTSIDE prism with vertices (84,12),(34,2),(47,234) and altitude from 12000 to 4500) and  LONGITUDE <= 51)
			and INSIDE prism with vertices (12,45),(1,1),(25,57),(89,3),(23,41) and altitude from 1000 to 1001
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAlwaysAndSimplePar() {
        val model = '''
			eval G(LONGITUDE <= 5 )and ICAO == "TRUC"
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAlwaysAndSimpleParArithm() {
        val model = '''
			eval G(LONGITUDE <= 1 - RAP.MAX_LONGITUDE) and ICAO == "TRUC"
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testEventuallyAndSimplePar() {
        val model = '''
			eval F(LONGITUDE <= 5 - 1) and ICAO == "TRUC"
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndSimpleAlwaysEvent() {
        val model = '''
			eval G(LONGITUDE <= 51) and F(ICAO == "TRUC")
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndSimpleAlwaysBoth() {
        val model = '''
			eval G(LONGITUDE <= 51 and ICAO == "TRUC")
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndNotAlways() {
        val model = '''
			eval not(G(LONGITUDE <= 51) and F(ICAO == "TRUC"))
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndOrAlwaysEvent() {
        val model = '''
			eval G(GROUNDSPEED <> 1400 and not(KNOWN_POSITIONS >= 4)) or F(CALLSIGN == "AC47ER")
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }

    @Test
    def void testAndOrEvent() {
        val model = '''
			eval F((GROUNDSPEED <> (1400 + 2) and not(KNOWN_POSITIONS >= 4)) or CALLSIGN == "AC47ER")
		'''.parse
        Assert.assertNotNull(model)
        val expr = model.getExpression
        print(expr)
        Assert.assertTrue(model.eResource.errors.isEmpty)
    }
}
