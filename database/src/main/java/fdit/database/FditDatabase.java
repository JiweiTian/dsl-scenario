package fdit.database;

import fdit.tools.functional.ThrowableConsumer;
import fdit.tools.functional.ThrowableFunction;
import org.h2.jdbcx.JdbcConnectionPool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public final class FditDatabase {

    public static final FditDatabase FDIT_DATABASE = new FditDatabase();

    private JdbcConnectionPool connectionPool;
    private String databaseUrl;

    private FditDatabase() {
    }

    public void open(final String databaseUrl) throws Exception {
        this.databaseUrl = databaseUrl;
        connectionPool = JdbcConnectionPool.create(databaseUrl, "", "");
        createDatabaseIfNotExists();
    }

    public void close() {
        if (connectionPool != null) {
            connectionPool.dispose();
            connectionPool = null;
            databaseUrl = null;
        }
    }

    public void empty() throws Exception {
        executeUpdateRequests("drop all objects delete files");
        final String currentDatabaseUrl = databaseUrl;
        close(); // close to delete really the database's files now
        open(currentDatabaseUrl);
    }

    public void executeUpdateRequests(final String... requests) throws Exception {
        executeInStatement(statement -> {
            for (final String request : requests) {
                statement.executeUpdate(request);
            }
        });
    }

    public void executeQuery(final String query,
                             final ThrowableConsumer<ResultSet> resultSetHandler) throws Exception {
        executeQuery(query, resultSet -> {
            resultSetHandler.acceptThrows(resultSet);
            return null;
        });
    }

    public <T> T executeQuery(final String query,
                              final ThrowableFunction<ResultSet, T> resultSetHandler) throws Exception {
        final AtomicReference<T> result = new AtomicReference<>();
        executeInStatement(statement -> {
            try (final ResultSet resultSet = statement.executeQuery(query)) {
                result.set(resultSetHandler.applyThrows(resultSet));
            }
        });
        return result.get();
    }

    public long executeInsertAndGetGeneratedId(final String insertRequest) throws Exception {
        final AtomicLong rowId = new AtomicLong();
        executeInStatement(statement -> {
            statement.executeUpdate(insertRequest, Statement.RETURN_GENERATED_KEYS);
            try (final ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    rowId.set(generatedKeys.getLong(1));
                }
            }
        });
        return rowId.get();
    }

    @SuppressWarnings("CallToDriverManagerGetConnection")
    private void executeInStatement(final ThrowableConsumer<Statement> statementConsumer) throws Exception {
        try (final Connection connection = connectionPool.getConnection();
             final Statement statement = connection.createStatement()) {
            connection.setAutoCommit(false);
            statementConsumer.acceptThrows(statement);
            connection.commit();
        }
    }

    public void executeInPreparedStatement(final String query,
                                           final ThrowableConsumer<PreparedStatement> statementConsumer) throws Exception {
        executeInPreparedStatement(Statement.NO_GENERATED_KEYS, query, statementConsumer);
    }

    @SuppressWarnings("CallToDriverManagerGetConnection")
    public void executeInPreparedStatement(final int autoGeneratedKeys,
                                           final String query,
                                           final ThrowableConsumer<PreparedStatement> statementConsumer) throws Exception {
        try (final Connection connection = connectionPool.getConnection();
             final PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys)) {
            connection.setAutoCommit(false);
            statementConsumer.acceptThrows(statement);
            connection.commit();
        }
    }

    private void createDatabaseIfNotExists() throws Exception {
        executeUpdateRequests(
                "create table if not exists RECORDINGS (" +
                        "id identity," +
                        "file_name varchar(255), " +
                        "file_size bigint, " +
                        "max_relative_date bigint, " +
                        "first_date bigint, " +
                        "primary key (id))",

                "create table if not exists AIRCRAFTS (" +
                        "table_id identity, " +
                        "recording_id bigint, " +
                        "fdit_id integer, " +
                        "icao integer, " +
                        "call_sign varchar(255), " +
                        "primary key (table_id)," +
                        "foreign key (recording_id) references RECORDINGS(id))",

                "create table if not exists SBS_AIRCRAFT_STATES (" +
                        "id identity, " +
                        "aircraft_table_id bigint, " +
                        "relative_date bigint, " +
                        "latitude float, " +
                        "longitude float, " +
                        "altitude float, " +
                        "ground_speed float, " +
                        "track float, " +
                        "vertical_rate float, " +
                        "squawk smallint, " +
                        "alert varchar(2) , " +
                        "emergency varchar(2) , " +
                        "spi varchar(2) , " +
                        "is_on_ground varchar(2) , " +
                        "primary key (id)," +
                        "foreign key (aircraft_table_id) references AIRCRAFTS(table_id))",

                "create index if not exists INDEX_RECORDINGS on RECORDINGS(file_name, file_size)",

                "create index if not exists INDEX_AIRCRAFTS on AIRCRAFTS(recording_id, fdit_id)",

                "create index if not exists INDEX_SBS_AIRCRAFT_STATES on SBS_AIRCRAFT_STATES(aircraft_table_id, relative_date)");
    }
}